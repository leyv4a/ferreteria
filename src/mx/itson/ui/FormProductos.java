/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mx.itson.ui;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.math.BigDecimal;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;
import mx.itson.domain.CarritoDeCompras;
import mx.itson.domain.Cliente;
import mx.itson.domain.Compra;
import mx.itson.domain.DetalleCarrito;
import mx.itson.domain.Producto;
import mx.itson.services.CarritoService;
import mx.itson.services.ClienteService;
import mx.itson.services.CompraService;
import mx.itson.services.DetalleCarritoService;
import mx.itson.services.ProductoService;

/**
 *
 * @author gabri
 */
public class FormProductos extends javax.swing.JFrame {

    private String email;

    public void setEmail(String email) {
        this.email = email;
    }

    public String getEmail() {
        return this.email;
    }

    /**
     * Creates new form FormProductos
     */
    public FormProductos() throws Exception {

        //inicializamos el panel que contiene los detalles del carrito
        pnlDetalles = new JPanel();

        Login login = new Login();
        initComponents();
        DefaultTableModel tableModel = new DefaultTableModel();
        tablaProductos.setModel(tableModel);

        tableModel.addColumn("Id");
        tableModel.addColumn("Nombre");
        tableModel.addColumn("Descripcion");
        tableModel.addColumn("Categoria");
        tableModel.addColumn("Precio");

        ProductoService productoService = new ProductoService();

        List<Producto> productos = productoService.listarProductos();

        for (Producto producto : productos) {
            tableModel.addRow(new Object[]{producto.getProductoId(), producto.getNombreProducto(), producto.getDetalles(), producto.getCategoria().getNombreCategoria(), producto.getPrecio()});
        }
        //le quitamos la visibilidad al panel que contiene los detalles del carrito
        pnlDetalles.setVisible(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelPrincipal = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaProductos = new javax.swing.JTable();
        agregarProducto = new javax.swing.JButton();
        spnCantidad = new javax.swing.JSpinner();
        pnlDetalles = new javax.swing.JPanel();
        btnComprar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDetallesCarrito = new javax.swing.JTable();
        txtTotal = new javax.swing.JTextField();
        BorrarDetalleCompleto = new javax.swing.JButton();
        QuitarDetalle = new javax.swing.JButton();
        txtSaldo = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(900, 600));
        setMinimumSize(new java.awt.Dimension(900, 600));
        setResizable(false);

        panelPrincipal.setBackground(new java.awt.Color(255, 102, 255));
        panelPrincipal.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(18, 44, 50));

        jLabel1.setFont(new java.awt.Font("Microsoft PhagsPa", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(220, 154, 29));
        jLabel1.setText("RATCHET FERRETERIA");

        jButton1.setBackground(new java.awt.Color(18, 44, 50));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mx/itson/assets/carrito.png"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.setRequestFocusEnabled(false);
        jButton1.setRolloverEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(305, 305, 305)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 212, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
        );

        panelPrincipal.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 60));

        jPanel3.setBackground(new java.awt.Color(255, 204, 0));

        tablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaProductos);

        agregarProducto.setText("Agregar");
        agregarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarProductoActionPerformed(evt);
            }
        });

        pnlDetalles.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnComprar.setText("Comprar");
        btnComprar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComprarActionPerformed(evt);
            }
        });
        pnlDetalles.add(btnComprar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 110, 50));

        tblDetallesCarrito.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Producto", "Cantidad", "Precio"
            }
        ));
        jScrollPane2.setViewportView(tblDetallesCarrito);

        pnlDetalles.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 270, 160));

        txtTotal.setText("Total :");
        txtTotal.setEnabled(false);
        pnlDetalles.add(txtTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 156, 90, 60));

        BorrarDetalleCompleto.setText("Borrar");
        BorrarDetalleCompleto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarDetalleCompletoActionPerformed(evt);
            }
        });
        pnlDetalles.add(BorrarDetalleCompleto, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 180, 70, 30));

        QuitarDetalle.setText("Quitar");
        QuitarDetalle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuitarDetalleActionPerformed(evt);
            }
        });
        pnlDetalles.add(QuitarDetalle, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 160, 70, 20));

        txtSaldo.setEnabled(false);

        jButton2.setText("Ver saldo");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(1, 1, 1)
                        .addComponent(txtSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                        .addComponent(pnlDetalles, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spnCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(agregarProducto))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(pnlDetalles, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(agregarProducto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSaldo, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(52, 52, 52))
        );

        panelPrincipal.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 900, 540));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void agregarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarProductoActionPerformed
        try {
            ClienteService clienteService = new ClienteService();
            CarritoService carritoService = new CarritoService();
            Cliente clienteEmail = clienteService.buscarClientePorEmail(this.getEmail());
            CarritoDeCompras carritoCompras = new CarritoDeCompras();

            //Validamos si el cliente tiene carritoCompras 
            carritoCompras = carritoService.obtenerCarritoPorCliente(clienteEmail.getClienteID());
            if (carritoCompras != null) {
                //Si tiene no se hace nada
//                System.out.println("Si tiene");
            } else {
//                System.out.println("No tiene");
                //Si no tiene se crea el carritoCompras
                carritoService.crearCarritoDeCompras(clienteEmail.getClienteID());
            }
            //Obtenemos el id del producto mediante la seleccion de la tabla
            int seleccion = tablaProductos.getSelectedRow();
            if (seleccion != -1) {
                int idProducto = (int) tablaProductos.getValueAt(seleccion, 0);
                int cantidad;

                //obtenemos la cantidad
                try {
                    SpinnerNumberModel model = (SpinnerNumberModel) spnCantidad.getModel();
                    cantidad = model.getNumber().intValue();

                    if (cantidad == 0) {
                        JOptionPane.showMessageDialog(null, "La cantidad no puede ser 0", "Error", JOptionPane.ERROR_MESSAGE);
                    } else {
//                       
                        DetalleCarritoService detalleService = new DetalleCarritoService();
                        DetalleCarrito detalleCarrito = new DetalleCarrito(carritoCompras.getCarritoID(), idProducto, cantidad);
                        //agregamos un nuevo carrito
                        detalleService.agregarDetalleCarrito(detalleCarrito);

                        //hacemos la tabla donde se muestran los detalles del carrito
                        DefaultTableModel tableDetalles = new DefaultTableModel();
                        tblDetallesCarrito.setModel(tableDetalles);

                        tableDetalles.addColumn("Producto");
                        tableDetalles.addColumn("Cantidad");
                        tableDetalles.addColumn("Precio");

                        DetalleCarritoService detalleCarritoService = new DetalleCarritoService();
                        List<DetalleCarrito> detalleCarritos = detalleCarritoService.listarDetallesPorCarritoId(carritoCompras.getCarritoID());

                        for (DetalleCarrito detalleCarrito1 : detalleCarritos) {
                            BigDecimal precioTotal = detalleCarrito1.getPrecio().multiply(BigDecimal.valueOf(detalleCarrito1.getCantidad()));
                            tableDetalles.addRow(new Object[]{detalleCarrito1.getNombreProducto(), detalleCarrito1.getCantidad(), precioTotal});
                        }

                        //SUMAR TOTAL
                        int columnaIndice = 2; // Índice de la columna que deseas sumar
                        int suma = 0; // Variable para almacenar la suma

                        for (int fila = 0; fila < tableDetalles.getRowCount(); fila++) {
                            Object valor = tableDetalles.getValueAt(fila, columnaIndice);

                            // Asegurarse de que el valor en la celda sea numérico
                            if (valor instanceof Number) {
                                suma += ((Number) valor).intValue();
                            }
                        }
                        txtTotal.setText(""+suma);

                        if (detalleCarrito != null) {
                            JOptionPane.showMessageDialog(null, "Producto agregado correctamente");
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "La cantidad ingresada no es válida.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

            } else {
                JOptionPane.showMessageDialog(null, "Debe selecciona un producto de la tabla.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
        }

    }//GEN-LAST:event_agregarProductoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        pnlDetalles.setVisible(!pnlDetalles.isVisible());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void BorrarDetalleCompletoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarDetalleCompletoActionPerformed
        try {

            DetalleCarritoService detalleCarrito = new DetalleCarritoService();
            ClienteService clienteService = new ClienteService();
            CarritoService carritoService = new CarritoService();
            Cliente clienteEmail = clienteService.buscarClientePorEmail(this.getEmail());
            CarritoDeCompras carritoCompras = new CarritoDeCompras();

            carritoCompras = carritoService.obtenerCarritoPorCliente(clienteEmail.getClienteID());
            detalleCarrito.eliminarDetalleCarrito(carritoCompras.getCarritoID());

            DefaultTableModel tableDetalles = new DefaultTableModel();
            tblDetallesCarrito.setModel(tableDetalles);

            tableDetalles.addColumn("Producto");
            tableDetalles.addColumn("Cantidad");
            tableDetalles.addColumn("Precio");

            DetalleCarritoService detalleCarritoService = new DetalleCarritoService();
            List<DetalleCarrito> detalleCarritos = detalleCarritoService.listarDetallesPorCarritoId(carritoCompras.getCarritoID());
            for (DetalleCarrito detalleCarrito1 : detalleCarritos) {
                tableDetalles.addRow(new Object[]{detalleCarrito1.getNombreProducto(), detalleCarrito1.getCantidad(), detalleCarrito1.getPrecio()});
            }
            txtTotal.setText("Total = 0");
        } catch (Exception e) {
        }
    }//GEN-LAST:event_BorrarDetalleCompletoActionPerformed

    private void QuitarDetalleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuitarDetalleActionPerformed
        try {

            int filaSeleccionada = tblDetallesCarrito.getSelectedRow();

            DefaultTableModel tableModel = (DefaultTableModel) tblDetallesCarrito.getModel();
            tableModel.removeRow(filaSeleccionada);

        } catch (Exception e) {
        }

    }//GEN-LAST:event_QuitarDetalleActionPerformed

    private void btnComprarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComprarActionPerformed
        try {

            DetalleCarritoService detalleCarrito = new DetalleCarritoService();
            ClienteService clienteService = new ClienteService();
            CarritoService carritoService = new CarritoService();
            CompraService compraService = new CompraService();
            CarritoDeCompras carritoCompras = new CarritoDeCompras();
            Cliente cliente = clienteService.buscarClientePorEmail(this.getEmail());
            Compra compra = new Compra(cliente);
            CompraService cs = new CompraService();
//            validamos si hay productos
            if (tblDetallesCarrito.getRowCount() > 0) {
                //validamos si cuenta con el saldo suficiente
                    String texto = txtTotal.getText()+".00";
                  BigDecimal total = new BigDecimal(texto);
                  boolean confirmar = cs.verificarSaldo(cliente, total);
//                  int comparacion = cliente.getSaldo().compareTo(total);
                if (confirmar) {
                    if (JOptionPane.showConfirmDialog(null, "Desea confirmar la compra?") == 0) {
                        //agregamos la compra
                        compraService.agregarCompra(compra);
                        //borramos detalle carrito y borramos la tabla
                        detalleCarrito.eliminarDetalleCarrito(carritoCompras.getCarritoID());

                        DefaultTableModel tableDetalles = new DefaultTableModel();
                        tblDetallesCarrito.setModel(tableDetalles);

                        tableDetalles.addColumn("Producto");
                        tableDetalles.addColumn("Cantidad");
                        tableDetalles.addColumn("Precio");

                        DetalleCarritoService detalleCarritoService = new DetalleCarritoService();
                        List<DetalleCarrito> detalleCarritos = detalleCarritoService.listarDetallesPorCarritoId(carritoCompras.getCarritoID());
                        for (DetalleCarrito detalleCarrito1 : detalleCarritos) {
                            tableDetalles.addRow(new Object[]{detalleCarrito1.getNombreProducto(), detalleCarrito1.getCantidad(), detalleCarrito1.getPrecio()});
                        }
                        txtTotal.setText("Total = 0");
                        JOptionPane.showMessageDialog(null, "Gracias por su compra!");
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Saldo insuficiente");
                }
            }else{
                JOptionPane.showMessageDialog(null, "La tabla esta vacia");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "AA");
        }


    }//GEN-LAST:event_btnComprarActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            
        ClienteService clienteService = new ClienteService();
       Cliente cliente = clienteService.buscarClientePorEmail(email);
       txtSaldo.setText("Tu saldo es : "+cliente.getSaldo());
       
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FormProductos().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(FormProductos.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });
       

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BorrarDetalleCompleto;
    private javax.swing.JButton QuitarDetalle;
    private javax.swing.JButton agregarProducto;
    private javax.swing.JButton btnComprar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panelPrincipal;
    private javax.swing.JPanel pnlDetalles;
    private javax.swing.JSpinner spnCantidad;
    private javax.swing.JTable tablaProductos;
    private javax.swing.JTable tblDetallesCarrito;
    private javax.swing.JTextField txtSaldo;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}
