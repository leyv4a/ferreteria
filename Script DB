-- Eliminar la tabla si existe
DROP DATABASE IF EXISTS dbferreteria5;

-- Crear la base de datos
CREATE DATABASE dbferreteria5;

-- Usar la base de datos
USE dbferreteria5;

-- Crear la tabla Categoria
CREATE TABLE Categoria (
    categoriaID INT AUTO_INCREMENT PRIMARY KEY,
    nombreCategoria VARCHAR(50) NOT NULL
);

-- Crear la tabla Producto
CREATE TABLE Producto (
    productoID INT AUTO_INCREMENT PRIMARY KEY,
    nombreProducto VARCHAR(50) NOT NULL,
    precio DECIMAL(10, 2) NOT NULL,
	detalles VARCHAR(150),
	iva DECIMAL(5,2) NOT NULL DEFAULT 0.16,
    categoriaID INT,
    FOREIGN KEY (categoriaID) REFERENCES Categoria(categoriaID)
);

-- Crear la tabla Cliente
CREATE TABLE Cliente (
    clienteID INT AUTO_INCREMENT PRIMARY KEY,
    nombreCliente VARCHAR(70) NOT NULL,
    email VARCHAR(50) NOT NULL UNIQUE,
    contrasena VARCHAR(25) NOT NULL,
    saldo DECIMAL(10, 2) NOT NULL DEFAULT 0.00
);

-- Crear la tabla CarritoDeCompras
CREATE TABLE CarritoDeCompras (
    carritoID INT AUTO_INCREMENT PRIMARY KEY,
    clienteID INT,
    FOREIGN KEY (clienteID) REFERENCES Cliente(clienteID)
);

-- Crear la tabla Compra
CREATE TABLE Compra (
    compraID INT AUTO_INCREMENT PRIMARY KEY,
    fechaCompra DATETIME NOT NULL,
    clienteID INT,
    estado VARCHAR(20) NOT NULL DEFAULT 'En Progreso',
    FOREIGN KEY (clienteID) REFERENCES Cliente(clienteID)
);

-- Crear la tabla DetalleCarrito
CREATE TABLE DetalleCarrito (
    detalleID INT AUTO_INCREMENT PRIMARY KEY,
    carritoID INT,
    productoID INT,
    cantidad INT NOT NULL,
    FOREIGN KEY (carritoID) REFERENCES CarritoDeCompras(carritoID),
    FOREIGN KEY (productoID) REFERENCES Producto(productoID)
);

-- Inserción de datos de prueba usando transacciones
START TRANSACTION;

-- Inserción de categorías
INSERT INTO Categoria (nombreCategoria) VALUES ('Herramientas');
INSERT INTO Categoria (nombreCategoria) VALUES ('Maquinaria');
INSERT INTO Categoria (nombreCategoria) VALUES ('Electrica');

-- Inserción de productos
INSERT INTO Producto (nombreProducto, precio, detalles, categoriaID) VALUES ('Martillo', 49.99,'Martillo de doble cabeza', 1);
INSERT INTO Producto (nombreProducto, precio, detalles, categoriaID) VALUES ('Generador', 50000.99,'Generador Electrico a gasolina 12,000 W', 2);
INSERT INTO Producto (nombreProducto, precio, detalles, categoriaID) VALUES ('Multimetro', 799.99,'Multimetro profesional con detector de voltaje sin contacto', 3);

-- Inserción de clientes
INSERT INTO Cliente (nombreCliente, email, contrasena, saldo) VALUES ('Jose Julian', 'JJ@yahoo.com', 'password1', 1000.00);
INSERT INTO Cliente (nombreCliente, email, contrasena, saldo) VALUES ('Carlos', 'Carlos22@gmail.com', 'password2', 750.00);

-- Finalizar la transacción
COMMIT;

-- Crear procedimiento almacenado para realizar una compra
DELIMITER //
CREATE PROCEDURE RealizarCompra (
    IN clienteIDParam INT,
    IN productoIDParam INT,
    IN cantidadParam INT
)
BEGIN
    DECLARE total DECIMAL(10, 2);
    
    -- Calcular el total de la compra
    SELECT precio * cantidadParam INTO total
    FROM Producto
    WHERE productoID = productoIDParam;
    
    -- Verificar si el cliente tiene saldo suficiente
    SELECT saldo INTO @saldo
    FROM Cliente
    WHERE clienteID = clienteIDParam;
    
    IF @saldo >= total THEN
        -- Iniciar una nueva transacción
        START TRANSACTION;
        
        -- Insertar en DetalleCarrito
        INSERT INTO DetalleCarrito (carritoID, productoID, cantidad) VALUES (clienteIDParam, productoIDParam, cantidadParam);
        
        -- Actualizar el saldo del cliente
        UPDATE Cliente SET saldo = saldo - total WHERE clienteID = clienteIDParam;
        
        -- Finalizar la transacción
        COMMIT;
        
        SELECT 'Compra realizada exitosamente' AS mensaje;
    ELSE
        SELECT 'Saldo insuficiente para realizar la compra' AS mensaje;
    END IF;
END;
//
DELIMITER ;

-- Crear trigger para el estado de compra
DELIMITER //
CREATE TRIGGER ActualizarEstadoDeCompra
BEFORE INSERT ON Compra
FOR EACH ROW
BEGIN
    -- Verificar si han pasado más de 10 minutos desde la compra
    IF TIMESTAMPDIFF(MINUTE, NEW.fechaCompra, NOW()) > 10 THEN
        -- Actualizar el estado de la compra a "No Cobrado"
        SET NEW.estado = 'No Cobrado';
    END IF;
END;
//
DELIMITER ;
